# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Continuous Integration

on:
  push:
    branches: [ "main", "release/*" ]
  pull_request:
    branches: [ "main", "release/*" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-suite:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - run: java --version
    - name: Build with Maven
      run: mvn -B test --file pom.xml

  test-kustomize:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Update base kustomization
      run: |
        rm devops/k8s/base/kustomization.yaml
        sed "s/_VERSION/${{ github.ref_name }}-${{ github.sha }}/g" devops/k8s/base/kustomization.tpl.yaml | \
        sed "s/_IMAGE_TAG/jvm-${{ github.ref_name }}-${{ github.sha }}/g" > devops/k8s/base/kustomization.yaml
    - name: 'Set up Kustomize'
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
        chmod u+x ./kustomize
    - name: 'Show ./overlays/dev'
      run: |-
        kustomize build ./devops/k8s/overlays/dev
    
  build-jvm:
    needs: test-suite
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - run: java --version
  
    - name: Build with Maven
      run: mvn -DskipTests -B package --file pom.xml

    - run: mv target/iron-bank-0.0.1-SNAPSHOT.jar target/app.jar
    - name: Upload .JAR
      uses: actions/upload-artifact@v4
      with:
        name: app.jar
        path: target/

  build-native:
    if: false # If true analyse if macos is needed
    needs: test-suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'graalvm'
        cache: maven
    
    - run: java --version
    - name: Build with Maven
      run: mvn -Pnative -B -DskipTests package --file pom.xml

    - run: mv target/iron-bank target/app
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: app-${{ matrix.os }}
        path: target/app*

  build-publish-docker-jvm:
    needs: build-jvm
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: app.jar
        path: target/

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
          context: .
          file: ./devops/images/jvm.dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:jvm,${{ env.REGISTRY }}/${{ github.repository }}:jvm-${{ github.ref_name }},${{ env.REGISTRY }}/${{ github.repository }}:jvm-${{ github.ref_name }}-${{ github.sha }}
    - name: COPY CONTAINER IMAGE NAME
      run: echo "CONTAINER IMAGE:" jvm-${{ github.ref_name }}-${{ github.sha }}
  apply-kustomize:
    needs: [ build-publish-docker-jvm, test-kustomize ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Update base kustomization
      run: |
        rm devops/k8s/base/kustomization.yaml
        sed "s/_VERSION/${{ github.ref_name }}-${{ github.sha }}/g" devops/k8s/base/kustomization.tpl.yaml | \
        sed "s/_IMAGE_TAG/jvm-${{ github.ref_name }}-${{ github.sha }}/g" > devops/k8s/base/kustomization.yaml
    - name: Save Kustomization changes
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add devops/k8s/base/kustomization.yaml
        git commit -m '[CI] Apply new image tag jvm-${{ github.ref_name }}-${{ github.sha }}'
        git push
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    # - name: Update dependency graph
    #   uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
    #   with:
    #       token: ${{ secrets.ACCESS_TOKEN }}

      
